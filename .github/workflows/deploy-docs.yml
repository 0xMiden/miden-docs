name: Build & Deploy Docs (Pages)

on:
  push:
    branches: [main] # deploy stable when docs repo changes
  workflow_dispatch:
    inputs:
      channel:
        description: "Which channel to deploy?"
        type: choice
        options: [stable, next]
        default: stable
      # optional per-repo overrides (branch/ref/SHA); leave empty to use defaults
      miden_base_ref:
        description: "Ref for 0xMiden/miden-base"
        required: false
      miden_tutorials_ref:
        description: "Ref for 0xMiden/miden-tutorials"
        required: false
      miden_client_ref:
        description: "Ref for 0xMiden/miden-client"
        required: false
      miden_node_ref:
        description: "Ref for 0xMiden/miden-node"
        required: false
      miden_vm_ref:
        description: "Ref for 0xMiden/miden-vm"
        required: false
      compiler_ref:
        description: "Ref for 0xMiden/compiler"
        required: false
  repository_dispatch: # let source repos trigger rebuilds on push
    types: [rebuild]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Determine channel
      CHANNEL: ${{ inputs.channel || 'stable' }}
      # Default refs per channel
      DEFAULT_REF_STABLE: main
      DEFAULT_REF_NEXT: next
      # Optional baseUrl override for next (adjust to Pages setup)
      BASE_URL: ${{ (inputs.channel || 'stable') == 'next' && '/next/' || '/' }}
    steps:
      - name: Checkout docs site
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      # Resolve refs per repo (inputs override defaults)
      - name: Resolve refs
        id: refs
        run: |
          chan="${CHANNEL}"
          def_stable="${DEFAULT_REF_STABLE}"
          def_next="${DEFAULT_REF_NEXT}"
          pick_ref() { # $1=input, $2=default
            if [ -n "$1" ]; then echo "$1"; else echo "$2"; fi
          }
          if [ "$chan" = "next" ]; then def="$def_next"; else def="$def_stable"; fi

          echo "BASE_REF=$def" >> $GITHUB_OUTPUT
          echo "BASE_URL=${BASE_URL}" >> $GITHUB_OUTPUT

          echo "MIDEN_BASE_REF=$(pick_ref '${{ inputs.miden_base_ref }}' "$def")" >> $GITHUB_OUTPUT
          echo "MIDEN_TUTORIALS_REF=$(pick_ref '${{ inputs.miden_tutorials_ref }}' "$def_stable")" >> $GITHUB_OUTPUT # always use stable ref for miden-tutorials
          echo "MIDEN_CLIENT_REF=$(pick_ref '${{ inputs.miden_client_ref }}' "$def")" >> $GITHUB_OUTPUT
          echo "MIDEN_NODE_REF=$(pick_ref '${{ inputs.miden_node_ref }}' "$def")" >> $GITHUB_OUTPUT
          echo "MIDEN_VM_REF=$(pick_ref '${{ inputs.miden_vm_ref }}' "$def")" >> $GITHUB_OUTPUT
          echo "COMPILER_REF=$(pick_ref '${{ inputs.compiler_ref }}' "$def")" >> $GITHUB_OUTPUT

      # Check out each source repo into vendor/*
      - name: Checkout 0xMiden/miden-base
        uses: actions/checkout@v4
        with:
          repository: 0xMiden/miden-base
          ref: ${{ steps.refs.outputs.MIDEN_BASE_REF }}
          path: vendor/miden-base

      - name: Checkout 0xMiden/miden-tutorials
        uses: actions/checkout@v4
        with:
          repository: 0xMiden/miden-tutorials
          ref: ${{ steps.refs.outputs.MIDEN_TUTORIALS_REF }}
          path: vendor/miden-tutorials

      - name: Checkout 0xMiden/miden-client
        uses: actions/checkout@v4
        with:
          repository: 0xMiden/miden-client
          ref: ${{ steps.refs.outputs.MIDEN_CLIENT_REF }}
          path: vendor/miden-client

      - name: Checkout 0xMiden/miden-node
        uses: actions/checkout@v4
        with:
          repository: 0xMiden/miden-node
          ref: ${{ steps.refs.outputs.MIDEN_NODE_REF }}
          path: vendor/miden-node

      - name: Checkout 0xMiden/miden-vm
        uses: actions/checkout@v4
        with:
          repository: 0xMiden/miden-vm
          ref: ${{ steps.refs.outputs.MIDEN_VM_REF }}
          path: vendor/miden-vm

      - name: Checkout 0xMiden/compiler
        uses: actions/checkout@v4
        with:
          repository: 0xMiden/compiler
          ref: ${{ steps.refs.outputs.COMPILER_REF }}
          path: vendor/compiler

      - name: Aggregate docs into single docs tree
        run: |
          echo "Aggregating vendor docs into docs/ structure..."
          # Clean any existing vendor directories (keep static docs)
          find docs -mindepth 1 -maxdepth 1 -type d ! -name 'static*' -exec rm -rf {} +

          # Rsync each vendor repo's docs into docs/
          if [ -d "vendor/miden-node/docs" ]; then
            cp -r vendor/miden-node/docs/ docs/miden-node/
            echo "Synced miden-node docs"
          fi

          # if [ -d "vendor/miden-vm/docs" ]; then
          #   cp -r vendor/miden-vm/docs/ docs/miden-vm/
          #   echo "Synced miden-vm docs"
          # fi

          if [ -d "vendor/miden-base/docs" ]; then
            cp -r vendor/miden-base/docs/ docs/miden-base/
            echo "Synced miden-base docs"
          fi

          if [ -d "vendor/miden-client/docs" ]; then
            cp -r vendor/miden-client/docs/ docs/miden-client/
            echo "Synced miden-client docs"
          fi

          if [ -d "vendor/compiler/docs" ]; then
            cp -r vendor/compiler/docs/ docs/compiler/
            echo "Synced compiler docs"
          fi

          if [ -d "vendor/miden-tutorials/docs" ]; then
            cp -r vendor/miden-tutorials/docs/src/ docs/miden-tutorials/
            echo "Synced miden-tutorials docs"
          fi

          echo "Content aggregation complete. Final docs structure:"
          ls -la docs/

      - name: Install deps
        run: npm install --frozen-lockfile

      - name: Build site
        env:
          CHANNEL: ${{ env.CHANNEL }}
          BASE_URL: ${{ steps.refs.outputs.BASE_URL }}
        run: |
          echo "Building channel: $CHANNEL (baseUrl=$BASE_URL)"
          npm run build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: build

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
